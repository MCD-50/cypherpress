import Web3 from "web3";

const web3 = new Web3(new Web3.providers.HttpProvider("http://127.0.0.1:8545"));

const byteCode =
    "0x6080604052600160005534801561001557600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611eb1806100666000396000f3006080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630484c4d2146100b45780630be1533e1461013f57806313f0ecd0146101a85780631b7443731461026657806325d3e03a1461042d5780636c497891146104eb57806385d19866146107ad57806393d9cb9114610853578063c7dac167146108d4578063f7d298af1461098d578063fcc1891c146109f6575b600080fd5b3480156100c057600080fd5b5061012560048036038101908080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610a21565b604051808215151515815260200191505060405180910390f35b34801561014b57600080fd5b506101a6600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610acf565b005b3480156101b457600080fd5b5061020f600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610b6d565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610252578082015181840152602081019050610237565b505050509050019250505060405180910390f35b34801561027257600080fd5b5061042b600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610cf5565b005b34801561043957600080fd5b50610494600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610f72565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156104d75780820151818401526020810190506104bc565b505050509050019250505060405180910390f35b3480156104f757600080fd5b50610516600480360381019080803590602001909291905050506110fa565b6040518080602001806020018060200180602001806020018060200187810387528d818151815260200191508051906020019080838360005b8381101561056a57808201518184015260208101905061054f565b50505050905090810190601f1680156105975780820380516001836020036101000a031916815260200191505b5087810386528c818151815260200191508051906020019080838360005b838110156105d05780820151818401526020810190506105b5565b50505050905090810190601f1680156105fd5780820380516001836020036101000a031916815260200191505b5087810385528b818151815260200191508051906020019080838360005b8381101561063657808201518184015260208101905061061b565b50505050905090810190601f1680156106635780820380516001836020036101000a031916815260200191505b5087810384528a818151815260200191508051906020019080838360005b8381101561069c578082015181840152602081019050610681565b50505050905090810190601f1680156106c95780820380516001836020036101000a031916815260200191505b50878103835289818151815260200191508051906020019080838360005b838110156107025780820151818401526020810190506106e7565b50505050905090810190601f16801561072f5780820380516001836020036101000a031916815260200191505b50878103825288818151815260200191508051906020019080838360005b8381101561076857808201518184015260208101905061074d565b50505050905090810190601f1680156107955780820380516001836020036101000a031916815260200191505b509c5050505050505050505050505060405180910390f35b3480156107b957600080fd5b506107d86004803603810190808035906020019092919050505061153e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108185780820151818401526020810190506107fd565b50505050905090810190601f1680156108455780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561085f57600080fd5b506108ba600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506115f9565b604051808215151515815260200191505060405180910390f35b3480156108e057600080fd5b5061098b60048036038101908080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506116b8565b005b34801561099957600080fd5b506109f4600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611972565b005b348015610a0257600080fd5b50610a0b611acf565b6040518082815260200191505060405180910390f35b600080151560026000858152602001908152602001600020600601836040518082805190602001908083835b602083101515610a725780518252602082019150602081019050602083039250610a4d565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff1615151415610ac45760009050610ac9565b600190505b92915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b2b57600080fd5b6004819080600181540180825580915050906001820390600052602060002001600090919290919091509080519060200190610b68929190611da9565b505050565b60603373ffffffffffffffffffffffffffffffffffffffff166003836040518082805190602001908083835b602083101515610bbe5780518252602082019150602081019050602083039250610b99565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610c3457600080fd5b6005826040518082805190602001908083835b602083101515610c6c5780518252602082019150602081019050602083039250610c47565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020805480602002602001604051908101604052809291908181526020018280548015610ce957602002820191906000526020600020905b815481526020019060010190808311610cd5575b50505050509050919050565b3373ffffffffffffffffffffffffffffffffffffffff166003826040518082805190602001908083835b602083101515610d445780518252602082019150602081019050602083039250610d1f565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610dba57600080fd5b8060026000805481526020019081526020016000206000019080519060200190610de5929190611da9565b508560026000805481526020019081526020016000206001019080519060200190610e11929190611da9565b508460026000805481526020019081526020016000206002019080519060200190610e3d929190611da9565b508360026000805481526020019081526020016000206003019080519060200190610e69929190611da9565b508260026000805481526020019081526020016000206004019080519060200190610e95929190611da9565b508160026000805481526020019081526020016000206005019080519060200190610ec1929190611da9565b506005816040518082805190602001908083835b602083101515610efa5780518252602082019150602081019050602083039250610ed5565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060005490806001815401808255809150509060018203906000526020600020016000909192909190915055506000808154809291906001019190505550505050505050565b60603373ffffffffffffffffffffffffffffffffffffffff166003836040518082805190602001908083835b602083101515610fc35780518252602082019150602081019050602083039250610f9e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561103957600080fd5b6006826040518082805190602001908083835b602083101515611071578051825260208201915060208101905060208303925061104c565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208054806020026020016040519081016040528092919081815260200182805480156110ee57602002820191906000526020600020905b8154815260200190600101908083116110da575b50505050509050919050565b60608060608060608061110b611e29565b6002600089815260200190815260200160002060c06040519081016040529081600082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111c35780601f10611198576101008083540402835291602001916111c3565b820191906000526020600020905b8154815290600101906020018083116111a657829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112655780601f1061123a57610100808354040283529160200191611265565b820191906000526020600020905b81548152906001019060200180831161124857829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113075780601f106112dc57610100808354040283529160200191611307565b820191906000526020600020905b8154815290600101906020018083116112ea57829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113a95780601f1061137e576101008083540402835291602001916113a9565b820191906000526020600020905b81548152906001019060200180831161138c57829003601f168201915b50505050508152602001600482018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561144b5780601f106114205761010080835404028352916020019161144b565b820191906000526020600020905b81548152906001019060200180831161142e57829003601f168201915b50505050508152602001600582018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114ed5780601f106114c2576101008083540402835291602001916114ed565b820191906000526020600020905b8154815290600101906020018083116114d057829003601f168201915b50505050508152505090508060200151816040015182606001518360a00151846080015185600001518595508494508393508292508191508090509650965096509650965096505091939550919395565b606060048281548110151561154f57fe5b906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115ed5780601f106115c2576101008083540402835291602001916115ed565b820191906000526020600020905b8154815290600101906020018083116115d057829003601f168201915b50505050509050919050565b6000806003836040518082805190602001908083835b602083101515611634578051825260208201915060208101905060208303925061160f565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156116ae57600090506116b3565b600190505b919050565b3373ffffffffffffffffffffffffffffffffffffffff166003826040518082805190602001908083835b60208310151561170757805182526020820191506020810190506020830392506116e2565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561177d57600080fd5b611835600260008581526020019081526020016000206000018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561182a5780601f106117ff5761010080835404028352916020019161182a565b820191906000526020600020905b81548152906001019060200180831161180d57829003601f168201915b505050505082611adc565b151561184057600080fd5b6006826040518082805190602001908083835b6020831015156118785780518252602082019150602081019050602083039250611853565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020839080600181540180825580915050906001820390600052602060002001600090919290919091505550600160026000858152602001908152602001600020600601836040518082805190602001908083835b60208310151561192357805182526020820191506020810190506020830392506118fe565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548160ff021916908315150217905550505050565b60006003826040518082805190602001908083835b6020831015156119ac5780518252602082019150602081019050602083039250611987565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611a2257600080fd5b336003826040518082805190602001908083835b602083101515611a5b5780518252602082019150602081019050602083039250611a36565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600480549050905090565b600080611ae98484611af2565b14905092915050565b6000606080600080869350859250835191508183511015611b1257825191505b600090505b81811015611d55578281815181101515611b2d57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168482815181101515611ba857fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161015611c43577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9450611d9f565b8281815181101515611c5157fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168482815181101515611ccc57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161115611d485760019450611d9f565b8080600101915050611b17565b825184511015611d87577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9450611d9f565b825184511115611d9a5760019450611d9f565b600094505b5050505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611dea57805160ff1916838001178555611e18565b82800160010185558215611e18579182015b82811115611e17578251825591602001919060010190611dfc565b5b509050611e259190611e60565b5090565b60c0604051908101604052806060815260200160608152602001606081526020016060815260200160608152602001606081525090565b611e8291905b80821115611e7e576000816000905550600101611e66565b5090565b905600a165627a7a72305820baf1532f572b11761c21dfbd9e222d201e315c1e89b7ec5a148277bd73b9b9140029"
const contractAbi = [
  {
    "constant": true,
    "inputs": [
      {
        "name": "_documentId",
        "type": "uint256"
      },
      {
        "name": "_delegatee",
        "type": "string"
      }
    ],
    "name": "isDeligatee",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_username",
        "type": "string"
      }
    ],
    "name": "addDeligateeAccounts",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_uploader",
        "type": "string"
      }
    ],
    "name": "getUploadedDocumentsNumber",
    "outputs": [
      {
        "name": "",
        "type": "uint256[]"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_messageKit",
        "type": "string"
      },
      {
        "name": "_dataSource",
        "type": "string"
      },
      {
        "name": "_label",
        "type": "string"
      },
      {
        "name": "_policyPubKey",
        "type": "string"
      },
      {
        "name": "_aliceSigKey",
        "type": "string"
      },
      {
        "name": "_uploader",
        "type": "string"
      }
    ],
    "name": "uploadADocument",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_deligatee",
        "type": "string"
      }
    ],
    "name": "getDeligatedDocumentsNumber",
    "outputs": [
      {
        "name": "",
        "type": "uint256[]"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_documentId",
        "type": "uint256"
      }
    ],
    "name": "getDocumentInfo",
    "outputs": [
      {
        "name": "",
        "type": "string"
      },
      {
        "name": "",
        "type": "string"
      },
      {
        "name": "",
        "type": "string"
      },
      {
        "name": "",
        "type": "string"
      },
      {
        "name": "",
        "type": "string"
      },
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_index",
        "type": "uint256"
      }
    ],
    "name": "getDelegteeUsername",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_username",
        "type": "string"
      }
    ],
    "name": "usernameAvailability",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_documentId",
        "type": "uint256"
      },
      {
        "name": "_deligatee",
        "type": "string"
      },
      {
        "name": "_uploader",
        "type": "string"
      }
    ],
    "name": "deligateDocument",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_username",
        "type": "string"
      }
    ],
    "name": "signUpUsername",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "getNumberOfDeligatee",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "constructor"
  }
];
let contract = new web3.eth.Contract(contractAbi);
let contractAddress;

export function deployContract(_privateKey, _callingObject) {
  return new Promise(function(resolve, reject) {
    let address = web3.eth.accounts.privateKeyToAccount(_privateKey).address;
    contract
      .deploy({ data: byteCode, arguments: [] })
      .estimateGas({ from: address })
      .then(async function(gasAmount) {
        let gasPrice = await web3.eth.getGasPrice();
        let gasValue = gasPrice * gasAmount;

        let transaction = {
          from: web3.utils.toChecksumAddress(address),
          gas: gasAmount + 10,
          data: contract.deploy({ data: byteCode, arguments: [] }).encodeABI()
        };
        let bal = await web3.eth.getBalance(address);
        let requiredEth = gasValue;
        let gasInEth = web3.utils.fromWei(requiredEth.toString());
        if (bal > requiredEth) {
          _callingObject.verifyTransaction(
            transaction,
            gasInEth,
            "SignIn User to Contract",
            function() {
              let signPromise = web3.eth.accounts.signTransaction(
                transaction,
                _privateKey
              );
              // console.log(signPromise);
              signPromise
                .then(signedTx => {
                  // console.log(signedTx);
                  const sentTx = web3.eth.sendSignedTransaction(
                    signedTx.raw || signedTx.rawTransaction
                  );
                  sentTx.on("receipt", receipt => {
                    resolve(receipt.contractAddress);
                  });
                  sentTx.on("transactionHash", function(hash) {
                    _callingObject.transactionMining(hash);
                    // console.log("Allowance hash =", hash);
                  });
                  sentTx.on("error", err => {
                    resolve(err);
                  });
                })
                .catch(err => {
                  console.error(err);
                });
            }
          );
        } else {
          _callingObject.insufficientFunds(gasInEth);
        }
      });
  });
}

export async function connectToContract(_contractAddress) {
  contract.options.address = _contractAddress;
  contractAddress = _contractAddress;
  console.log("connectToContract:", contractAddress);
  return true;
}

export async function deligateAccess(_username, _privateKey, _callingObject) {
  console.log("deligateAccess", _privateKey);
  return new Promise(function(resolve, reject) {
    let address = web3.eth.accounts.privateKeyToAccount(_privateKey).address;
    console.log("deligateAccess:", address);
    contract.methods
      .addDeligateeAccounts(_username)
      .estimateGas({
        from: address
      })
      .then(async function(gasAmount) {
        web3.eth.getGasPrice().then(function(gasPrice) {
          let gasValue = gasPrice * gasAmount;

          let transaction = {
            from: web3.utils.toChecksumAddress(address),
            to: web3.utils.toChecksumAddress(contractAddress),
            gas: gasAmount + 10,
            data: contract.methods.addDeligateeAccounts(_username).encodeABI()
          };

          web3.eth.getBalance(address).then(bal => {
            let requiredEth = gasValue;
            let gasInEth = web3.utils.fromWei(requiredEth.toString());
            // console.log(typeof requiredEth);
            if (bal > requiredEth) {
              _callingObject.verifyTransaction(
                transaction,
                gasInEth,
                "Adding Delegatee",
                function() {
                  let signPromise = web3.eth.accounts.signTransaction(
                    transaction,
                    _privateKey
                  );
                  // console.log(signPromise);
                  signPromise
                    .then(signedTx => {
                      // console.log(signedTx);
                      const sentTx = web3.eth.sendSignedTransaction(
                        signedTx.raw || signedTx.rawTransaction
                      );
                      sentTx.on("receipt", receipt => {
                        resolve(true);
                      });
                      sentTx.on("transactionHash", function(hash) {
                        _callingObject.transactionMining(hash);
                        // console.log("Allowance hash =", hash);
                      });
                      sentTx.on("error", err => {
                        resolve(err);
                      });
                    })
                    .catch(err => {
                      console.error(err);
                    });
                }
              );
            } else {
              _callingObject.insufficientFunds(gasInEth);
            }
          });
        });
      });
  });
}

// async function testing() {
//   let callingObject = {
//     verifyTransaction: function(
//       transaction,
//       gasInEth,
//       transactionName,
//       callback
//     ) {
//       callback();
//     },
//     transactionMining: function(hash) {},
//     insufficientFunds: function(eth) {}
//   };
//   deployContract(
//     "0x36B298BE4646D2044F02ADCD1AF39A9069EF798CA4EF6F439553AA05935AAE47",
//     callingObject
//   );
// }
//
// testing();
