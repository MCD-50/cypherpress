import Web3 from "web3";

const web3 = new Web3(new Web3.providers.HttpProvider("http://127.0.0.1:8545"));

const byteCode =
    "";
const contractAbi = [
  {
    "constant": true,
    "inputs": [
      {
        "name": "_documentId",
        "type": "uint256"
      },
      {
        "name": "_delegatee",
        "type": "string"
      }
    ],
    "name": "isDeligatee",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_username",
        "type": "string"
      }
    ],
    "name": "addDeligateeAccounts",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_uploader",
        "type": "string"
      }
    ],
    "name": "getUploadedDocumentsNumber",
    "outputs": [
      {
        "name": "",
        "type": "uint256[]"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_messageKit",
        "type": "string"
      },
      {
        "name": "_dataSource",
        "type": "string"
      },
      {
        "name": "_label",
        "type": "string"
      },
      {
        "name": "_policyPubKey",
        "type": "string"
      },
      {
        "name": "_aliceSigKey",
        "type": "string"
      },
      {
        "name": "_uploader",
        "type": "string"
      }
    ],
    "name": "uploadADocument",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_deligatee",
        "type": "string"
      }
    ],
    "name": "getDeligatedDocumentsNumber",
    "outputs": [
      {
        "name": "",
        "type": "uint256[]"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "getNumberOfUsers",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_documentId",
        "type": "uint256"
      }
    ],
    "name": "getDocumentInfo",
    "outputs": [
      {
        "name": "",
        "type": "string"
      },
      {
        "name": "",
        "type": "string"
      },
      {
        "name": "",
        "type": "string"
      },
      {
        "name": "",
        "type": "string"
      },
      {
        "name": "",
        "type": "string"
      },
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_index",
        "type": "uint256"
      }
    ],
    "name": "getDelegteeUsername",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_username",
        "type": "string"
      }
    ],
    "name": "usernameAvailability",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_documentId",
        "type": "uint256"
      },
      {
        "name": "_deligatee",
        "type": "string"
      },
      {
        "name": "_uploader",
        "type": "string"
      }
    ],
    "name": "deligateDocument",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_index",
        "type": "uint256"
      }
    ],
    "name": "getUsername",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_username",
        "type": "string"
      }
    ],
    "name": "signUpUsername",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "getNumberOfDeligatee",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "constructor"
  }
];
let contract = new web3.eth.Contract(contractAbi);
let contractAddress;

export function deployContract(_privateKey, _callingObject) {
  return new Promise(function(resolve, reject) {
    let address = web3.eth.accounts.privateKeyToAccount(_privateKey).address;
    contract
      .deploy({ data: byteCode, arguments: [] })
      .estimateGas({ from: address })
      .then(async function(gasAmount) {
        let gasPrice = await web3.eth.getGasPrice();
        let gasValue = gasPrice * gasAmount;

        let transaction = {
          from: web3.utils.toChecksumAddress(address),
          gas: gasAmount + 10,
          data: contract.deploy({ data: byteCode, arguments: [] }).encodeABI()
        };
        let bal = await web3.eth.getBalance(address);
        let requiredEth = gasValue;
        let gasInEth = web3.utils.fromWei(requiredEth.toString());
        if (bal > requiredEth) {
          _callingObject.verifyTransaction(
            transaction,
            gasInEth,
            "SignIn User to Contract",
            function() {
              let signPromise = web3.eth.accounts.signTransaction(
                transaction,
                _privateKey
              );
              // console.log(signPromise);
              signPromise
                .then(signedTx => {
                  // console.log(signedTx);
                  const sentTx = web3.eth.sendSignedTransaction(
                    signedTx.raw || signedTx.rawTransaction
                  );
                  sentTx.on("receipt", receipt => {
                    resolve(receipt.contractAddress);
                  });
                  sentTx.on("transactionHash", function(hash) {
                    _callingObject.transactionMining(hash);
                    // console.log("Allowance hash =", hash);
                  });
                  sentTx.on("error", err => {
                    resolve(err);
                  });
                })
                .catch(err => {
                  console.error(err);
                });
            }
          );
        } else {
          _callingObject.insufficientFunds(gasInEth);
        }
      });
  });
}

export async function connectToContract(_contractAddress) {
  contract.options.address = _contractAddress;
  contractAddress = _contractAddress;
  console.log("connectToContract:", contractAddress);
  return true;
}

export async function deligateAccess(_username, _privateKey, _callingObject) {
  console.log("deligateAccess", _privateKey);
  return new Promise(function(resolve, reject) {
    let address = web3.eth.accounts.privateKeyToAccount(_privateKey).address;
    console.log("deligateAccess:", address);
    contract.methods
      .addDeligateeAccounts(_username)
      .estimateGas({
        from: address
      })
      .then(async function(gasAmount) {
        web3.eth.getGasPrice().then(function(gasPrice) {
          let gasValue = gasPrice * gasAmount;

          let transaction = {
            from: web3.utils.toChecksumAddress(address),
            to: web3.utils.toChecksumAddress(contractAddress),
            gas: gasAmount + 10,
            data: contract.methods.addDeligateeAccounts(_username).encodeABI()
          };

          web3.eth.getBalance(address).then(bal => {
            let requiredEth = gasValue;
            let gasInEth = web3.utils.fromWei(requiredEth.toString());
            // console.log(typeof requiredEth);
            if (bal > requiredEth) {
              _callingObject.verifyTransaction(
                transaction,
                gasInEth,
                "Adding Delegatee",
                function() {
                  let signPromise = web3.eth.accounts.signTransaction(
                    transaction,
                    _privateKey
                  );
                  // console.log(signPromise);
                  signPromise
                    .then(signedTx => {
                      // console.log(signedTx);
                      const sentTx = web3.eth.sendSignedTransaction(
                        signedTx.raw || signedTx.rawTransaction
                      );
                      sentTx.on("receipt", receipt => {
                        resolve(true);
                      });
                      sentTx.on("transactionHash", function(hash) {
                        _callingObject.transactionMining(hash);
                        // console.log("Allowance hash =", hash);
                      });
                      sentTx.on("error", err => {
                        resolve(err);
                      });
                    })
                    .catch(err => {
                      console.error(err);
                    });
                }
              );
            } else {
              _callingObject.insufficientFunds(gasInEth);
            }
          });
        });
      });
  });
}

// async function testing() {
//   let callingObject = {
//     verifyTransaction: function(
//       transaction,
//       gasInEth,
//       transactionName,
//       callback
//     ) {
//       callback();
//     },
//     transactionMining: function(hash) {},
//     insufficientFunds: function(eth) {}
//   };
//   deployContract(
//     "0x36B298BE4646D2044F02ADCD1AF39A9069EF798CA4EF6F439553AA05935AAE47",
//     callingObject
//   );
// }
//
// testing();
